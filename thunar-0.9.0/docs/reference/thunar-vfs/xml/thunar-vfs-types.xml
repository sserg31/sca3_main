<refentry id="thunar-vfs-Basic-Types">
<refmeta>
<refentrytitle role="top_of_page">Basic Types</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>THUNAR-VFS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Basic Types</refname>
<refpurpose>Standard Thunar-VFS types, defined for ease-of-use and portability.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>
<refsect1>
<title>Stability Level</title>
Stable, unless otherwise indicated
</refsect1>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;thunar-vfs/thunar-vfs.h&gt;


enum                <link linkend="ThunarVfsDeepCountFlags">ThunarVfsDeepCountFlags</link>;
enum                <link linkend="ThunarVfsFileType">ThunarVfsFileType</link>;
enum                <link linkend="ThunarVfsFileMode">ThunarVfsFileMode</link>;
enum                <link linkend="ThunarVfsFileFlags">ThunarVfsFileFlags</link>;
typedef             <link linkend="ThunarVfsFileDevice">ThunarVfsFileDevice</link>;
typedef             <link linkend="ThunarVfsFileSize">ThunarVfsFileSize</link>;
typedef             <link linkend="ThunarVfsFileTime">ThunarVfsFileTime</link>;
typedef             <link linkend="ThunarVfsGroupId">ThunarVfsGroupId</link>;
typedef             <link linkend="ThunarVfsUserId">ThunarVfsUserId</link>;


</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
  Thunar-VFS defines a number of commonly used types to abstract the details
  of the underlying system.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="ThunarVfsDeepCountFlags" role="enum"/>enum ThunarVfsDeepCountFlags</title>
<indexterm><primary>ThunarVfsDeepCountFlags</primary></indexterm><programlisting>typedef enum /*&lt; flags &gt;*/
{
  THUNAR_VFS_DEEP_COUNT_FLAGS_NONE            = 0L,
  THUNAR_VFS_DEEP_COUNT_FLAGS_FOLLOW_SYMLINKS = 1L &lt;&lt; 0,
} ThunarVfsDeepCountFlags;
</programlisting>
<para>
Additional flags to pass to <link linkend="thunar-vfs-deep-count"><function>thunar_vfs_deep_count()</function></link>, which
control the exact behavior of the job.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="THUNAR-VFS-DEEP-COUNT-FLAGS-NONE:CAPS" role="constant"/><literal>THUNAR_VFS_DEEP_COUNT_FLAGS_NONE</literal></term>
<listitem><simpara> no special behavior.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-DEEP-COUNT-FLAGS-FOLLOW-SYMLINKS:CAPS" role="constant"/><literal>THUNAR_VFS_DEEP_COUNT_FLAGS_FOLLOW_SYMLINKS</literal></term>
<listitem><simpara> follow symlinks to folders. If this flag is set, the
                                               job will also count symlinked folders recursively.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="ThunarVfsFileType" role="enum"/>enum ThunarVfsFileType</title>
<indexterm><primary>ThunarVfsFileType</primary></indexterm><programlisting>typedef enum
{
  THUNAR_VFS_FILE_TYPE_PORT       = 0160000 &gt;&gt; 12,
  THUNAR_VFS_FILE_TYPE_DOOR       = 0150000 &gt;&gt; 12,
  THUNAR_VFS_FILE_TYPE_SOCKET     = 0140000 &gt;&gt; 12,
  THUNAR_VFS_FILE_TYPE_SYMLINK    = 0120000 &gt;&gt; 12,
  THUNAR_VFS_FILE_TYPE_REGULAR    = 0100000 &gt;&gt; 12,
  THUNAR_VFS_FILE_TYPE_BLOCKDEV   = 0060000 &gt;&gt; 12,
  THUNAR_VFS_FILE_TYPE_DIRECTORY  = 0040000 &gt;&gt; 12,
  THUNAR_VFS_FILE_TYPE_CHARDEV    = 0020000 &gt;&gt; 12,
  THUNAR_VFS_FILE_TYPE_FIFO       = 0010000 &gt;&gt; 12,
  THUNAR_VFS_FILE_TYPE_UNKNOWN    = 0000000 &gt;&gt; 12,
} ThunarVfsFileType;
</programlisting>
<para>
Describes the type of a file.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-TYPE-PORT:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_TYPE_PORT</literal></term>
<listitem><simpara> An event port (Solaris event framework).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-TYPE-DOOR:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_TYPE_DOOR</literal></term>
<listitem><simpara> A door (Solaris IPC mechanism).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-TYPE-SOCKET:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_TYPE_SOCKET</literal></term>
<listitem><simpara> A unix domain socket.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-TYPE-SYMLINK:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_TYPE_SYMLINK</literal></term>
<listitem><simpara> A broken symlink, for which the target does
                                 not exist (if the target would exist, the
                                 <link linkend="ThunarVfsInfo"><type>ThunarVfsInfo</type></link> object would have the type
                                 of the target).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-TYPE-REGULAR:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_TYPE_REGULAR</literal></term>
<listitem><simpara> A regular file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-TYPE-BLOCKDEV:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_TYPE_BLOCKDEV</literal></term>
<listitem><simpara> A block device node.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-TYPE-DIRECTORY:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_TYPE_DIRECTORY</literal></term>
<listitem><simpara> A directory node.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-TYPE-CHARDEV:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_TYPE_CHARDEV</literal></term>
<listitem><simpara> A character device node.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-TYPE-FIFO:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_TYPE_FIFO</literal></term>
<listitem><simpara> A named FIFO.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-TYPE-UNKNOWN:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_TYPE_UNKNOWN</literal></term>
<listitem><simpara> The exact type of the file could not be
                                 determined.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="ThunarVfsFileMode" role="enum"/>enum ThunarVfsFileMode</title>
<indexterm><primary>ThunarVfsFileMode</primary></indexterm><programlisting>typedef enum /*&lt; flags &gt;*/
{
  THUNAR_VFS_FILE_MODE_SUID       = 04000,
  THUNAR_VFS_FILE_MODE_SGID       = 02000,
  THUNAR_VFS_FILE_MODE_STICKY     = 01000,
  THUNAR_VFS_FILE_MODE_USR_ALL    = 00700,
  THUNAR_VFS_FILE_MODE_USR_READ   = 00400,
  THUNAR_VFS_FILE_MODE_USR_WRITE  = 00200,
  THUNAR_VFS_FILE_MODE_USR_EXEC   = 00100,
  THUNAR_VFS_FILE_MODE_GRP_ALL    = 00070,
  THUNAR_VFS_FILE_MODE_GRP_READ   = 00040,
  THUNAR_VFS_FILE_MODE_GRP_WRITE  = 00020,
  THUNAR_VFS_FILE_MODE_GRP_EXEC   = 00010,
  THUNAR_VFS_FILE_MODE_OTH_ALL    = 00007,
  THUNAR_VFS_FILE_MODE_OTH_READ   = 00004,
  THUNAR_VFS_FILE_MODE_OTH_WRITE  = 00002,
  THUNAR_VFS_FILE_MODE_OTH_EXEC   = 00001,
} ThunarVfsFileMode;
</programlisting>
<para>
Special flags and permissions of a filesystem entity.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-SUID:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_SUID</literal></term>
<listitem><simpara> SUID bit.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-SGID:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_SGID</literal></term>
<listitem><simpara> SGID bit.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-STICKY:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_STICKY</literal></term>
<listitem><simpara> Sticky bit.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-USR-ALL:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_USR_ALL</literal></term>
<listitem><simpara> Owner can do everything.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-USR-READ:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_USR_READ</literal></term>
<listitem><simpara> Owner can read the file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-USR-WRITE:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_USR_WRITE</literal></term>
<listitem><simpara> Owner can write the file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-USR-EXEC:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_USR_EXEC</literal></term>
<listitem><simpara> Owner can execute the file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-GRP-ALL:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_GRP_ALL</literal></term>
<listitem><simpara> Owner group can do everything.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-GRP-READ:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_GRP_READ</literal></term>
<listitem><simpara> Owner group can read the file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-GRP-WRITE:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_GRP_WRITE</literal></term>
<listitem><simpara> Owner group can write the file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-GRP-EXEC:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_GRP_EXEC</literal></term>
<listitem><simpara> Owner group can execute the file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-OTH-ALL:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_OTH_ALL</literal></term>
<listitem><simpara> Others can do everything.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-OTH-READ:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_OTH_READ</literal></term>
<listitem><simpara> Others can read the file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-OTH-WRITE:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_OTH_WRITE</literal></term>
<listitem><simpara> Others can write the file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-MODE-OTH-EXEC:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_MODE_OTH_EXEC</literal></term>
<listitem><simpara> Others can execute the file.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="ThunarVfsFileFlags" role="enum"/>enum ThunarVfsFileFlags</title>
<indexterm><primary>ThunarVfsFileFlags</primary></indexterm><programlisting>typedef enum /*&lt; flags &gt;*/
{
  THUNAR_VFS_FILE_FLAGS_NONE       = 0,
  THUNAR_VFS_FILE_FLAGS_SYMLINK    = 1L &lt;&lt; 0,
  THUNAR_VFS_FILE_FLAGS_EXECUTABLE = 1L &lt;&lt; 1,
  THUNAR_VFS_FILE_FLAGS_HIDDEN     = 1L &lt;&lt; 2,
  THUNAR_VFS_FILE_FLAGS_READABLE   = 1L &lt;&lt; 3,
  THUNAR_VFS_FILE_FLAGS_WRITABLE   = 1L &lt;&lt; 4,
} ThunarVfsFileFlags;
</programlisting>
<para>
Flags providing additional information about the
file system entity.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-FLAGS-NONE:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_FLAGS_NONE</literal></term>
<listitem><simpara> No additional information available.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-FLAGS-SYMLINK:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_FLAGS_SYMLINK</literal></term>
<listitem><simpara> The file is a symlink. Whether or not
                                    the info fields refer to the symlink
                                    itself or the linked file, depends on 
                                    whether the symlink is broken or not.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-FLAGS-EXECUTABLE:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_FLAGS_EXECUTABLE</literal></term>
<listitem><simpara> The file can most probably be executed
                                    by <link linkend="thunar-vfs-info-execute"><function>thunar_vfs_info_execute()</function></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-FLAGS-HIDDEN:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_FLAGS_HIDDEN</literal></term>
<listitem><simpara> The file should not be displayed normally,
                                    but only if the user requests to display
                                    hidden files. Hidden files start with a
                                    dot character ('.') or end with a tilde
                                    character ('~').
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-FLAGS-READABLE:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_FLAGS_READABLE</literal></term>
<listitem><simpara> The file can most probably be read by the
                                    current user.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="THUNAR-VFS-FILE-FLAGS-WRITABLE:CAPS" role="constant"/><literal>THUNAR_VFS_FILE_FLAGS_WRITABLE</literal></term>
<listitem><simpara> The file can most probably be written by
                                    the current user.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="ThunarVfsFileDevice" role="typedef"/>ThunarVfsFileDevice</title>
<indexterm><primary>ThunarVfsFileDevice</primary></indexterm><programlisting>typedef dev_t ThunarVfsFileDevice;
</programlisting>
<para>
  Datatype to represent the device number of a file.
</para></refsect2>
<refsect2>
<title><anchor id="ThunarVfsFileSize" role="typedef"/>ThunarVfsFileSize</title>
<indexterm><primary>ThunarVfsFileSize</primary></indexterm><programlisting>typedef gint64 ThunarVfsFileSize;
</programlisting>
<para>
  Datatype to represent file sizes (in bytes). The file size
  is always represented as a 64bit integer, even on system that
  do not support large files.
</para></refsect2>
<refsect2>
<title><anchor id="ThunarVfsFileTime" role="typedef"/>ThunarVfsFileTime</title>
<indexterm><primary>ThunarVfsFileTime</primary></indexterm><programlisting>typedef time_t ThunarVfsFileTime;
</programlisting>
<para>
  Datatype to represent file times (in seconds).
</para></refsect2>
<refsect2>
<title><anchor id="ThunarVfsGroupId" role="typedef"/>ThunarVfsGroupId</title>
<indexterm><primary>ThunarVfsGroupId</primary></indexterm><programlisting>typedef gid_t ThunarVfsGroupId;
</programlisting>
<para>
  Datatype to represent a group id.
</para></refsect2>
<refsect2>
<title><anchor id="ThunarVfsUserId" role="typedef"/>ThunarVfsUserId</title>
<indexterm><primary>ThunarVfsUserId</primary></indexterm><programlisting>typedef uid_t ThunarVfsUserId;
</programlisting>
<para>
  Datatype to represent a user id.
</para></refsect2>

</refsect1>




</refentry>
